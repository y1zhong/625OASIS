#--------------------------------------------------------------------
S.new =  S.new[apply(S.new != 0, 1, any), apply(S.new != 0, 2, any) ,]
data = read.csv("./data/oasis_cross-sectional_filter.csv")
oasis_f = data[,c(1,2,4:10)]
set.seed(123)
pos = sample(1:5,1)
mi.oasis_f = mice(oasis_f, m=5, printFlag =FALSE)
mi.temp.oasis_f = complete(mi.oasis_f,"all")
oasis_csdt = mi.temp.oasis_f[[pos]][,c(2:5,7)]
labels = oasis_csdt$CDR
n = nrow(S.new)
num_lst = 1:n
set.seed(123)
random_sample <- createDataPartition(num_lst, p = 0.8, list = FALSE)
train.X = S.new[,,random_sample]
test.X = S.new[,,-random_sample]
oasis_csdt$CDR = as.factor(oasis_csdt$CDR)
levels(oasis_csdt$CDR) <- c("EqaulTo0", "LargeThan0")
train.demo = oasis_csdt[random_sample,]
test.demo = oasis_csdt[-random_sample,]
train.Y = as.numeric(train.demo$CDR)-1
test.Y = as.numeric(test.demo$CDR)-1
prep_binary_classification = function(images, labels, posLabel = 1, negLabel = 0) {
dims = dim(images)
X.pos = t(matrix(images[,,labels %in% posLabel],nrow=dims[1]*dims[2])) ## n1 * 36608
X.neg = t(matrix(images[,,labels %in% negLabel],nrow=dims[1]*dims[2])) ## n1 * 36608
return(list(X=rbind(X.pos, X.neg),y = c(rep(1,nrow(X.pos)),rep(0,nrow(X.neg)))))
}
trn = prep_binary_classification(train.X, train.Y, 1, 0)
tst = prep_binary_classification(test.X, test.Y, 1, 0)
pca.X =prcomp(trn$X)
trn_X <- predict(pca.X, newdata = trn$X)
tst_X <- predict(pca.X, newdata =tst$X)
Training_data <- cbind.data.frame(y=train.demo$CDR,trn_X, train.demo[,c(1:4)])
Testing_data <- cbind.data.frame(y=test.demo$CDR,tst_X,test.demo[,c(1:4)])
True_cdr = as.numeric(Testing_data$y)-1
calc_acc = function(actual, predicted) {
mean(actual == predicted)
}
ctrl <- trainControl(method = "cv", number=10, savePredictions=TRUE, classProbs=TRUE, allowParallel = T,verboseIter = T)
## LDA classification
library(MASS)
set.seed(123)
lda.fit <-train(x = Training_data[,-1], y = Training_data$y, data = Training_data, method="sparseLDA",trControl=ctrl,tuneLength=10)
#lda.Yhat = lda.fit$pred$pred
lda.pred = predict(lda.fit, Testing_data)
lda.TrainAcc = max(na.omit(lda.fit$results$Accuracy))
lda.TestAcc = calc_acc(predicted = lda.pred, actual = Testing_data$y)
lda.cfmat = table(Prediction = lda.pred, Reference = True_cdr)
lda.res = list(lda.fit=lda.fit,lda.TrainAcc=lda.TrainAcc,lda.TestAcc=lda.TestAcc,lda.cfmat=lda.cfmat)
lda.res
## SVM with Linear Kernel
set.seed(123)
svm.lin.fit <- train(y~., data = Training_data, method = "svmLinear2", trControl = ctrl, tuneLength = 10)
#svm.lin.Yhat = svm.lin.fit$pred[svm.lin.fit$results$cost == 0.5,]$pred
svm.lin.TrainAcc = max(svm.lin.fit$results["Accuracy"])
svm.lin.pred=predict(svm.lin.fit,Testing_data)
svm.lin.TestAcc = calc_acc(predicted = svm.lin.pred, actual = Testing_data$y)
svm.lin.cfmat = table(Prediction = svm.lin.pred, Reference = True_cdr)
svm.lin.res = list(svm.lin.fit=svm.lin.fit,svm.lin.TrainAcc=svm.lin.TrainAcc,svm.lin.TestAcc=svm.lin.TestAcc,svm.lin.cfmat=svm.lin.cfmat)
svm.lin.res
## SVM with Radial Kernel
set.seed(123)
svm.rad.fit <-train(y~., data = Training_data, method="svmRadial",trControl=ctrl,tuneLength=10)
#svm.rad.Yhat = svm.rad.fit$pred[svm.rad.fit$results$C == 0.5,]$pred
svm.rad.TrainAcc = max(svm.rad.fit$results["Accuracy"])
svm.rad.pred=predict(svm.rad.fit,Testing_data)
svm.rad.TestAcc = calc_acc(predicted = svm.rad.pred, actual = Testing_data$y)
svm.rad.cfmat = table(Prediction = svm.rad.pred, Reference = True_cdr)
svm.rad.res = list(svm.rad.fit=svm.rad.fit,svm.rad.TrainAcc=svm.rad.TrainAcc,svm.rad.TestAcc=svm.rad.TestAcc,svm.rad.cfmat=svm.rad.cfmat)
svm.rad.res
# ## SVM with Polynomial Kernel
# set.seed(123)
# svm.ply.fit <-train(y~., data = Training_data, method="svmPoly",trControl=ctrl,tuneLength=10)
# #svm.ply.Yhat = svm.ply.fit$pred[svm.ply.fit$results$C == 0.5,]$pred
# svm.ply.TrainAcc = max(svm.ply.fit$results["Accuracy"])
# svm.ply.pred=predict(svm.ply.fit,Testing_data)
# svm.ply.TestAcc = calc_acc(predicted = svm.ply.pred, actual = Testing_data$y)
#
# svm.ply.res = list(svm.ply.fit=svm.ply.fit,svm.ply.TrainAcc=svm.ply.TrainAcc,svm.ply.TestAcc=svm.ply.TestAcc)
# svm.ply.res
## Ramdom Forest
set.seed(123)
rf.fit <-train(y~., data = Training_data, method="rf",trControl=ctrl,tuneLength=10)
rf.TrainAcc = max(rf.fit$results["Accuracy"])
rf.pred=predict(rf.fit,Testing_data)
rf.TestAcc = calc_acc(predicted = rf.pred, actual = Testing_data$y)
rf.cfmat = table(Prediction = rf.pred, Reference = True_cdr)
rf.res = list(rf.fit=rf.fit,rf.TrainAcc=rf.TrainAcc,rf.TestAcc=rf.TestAcc,rf.cfmat=rf.cfmat)
rf.res
# ## Naive Bayes
# set.seed(123)
# nb.fit <-train(y~., data = Training_data, method="nb",trControl=ctrl,tuneLength=10)
#
# nb.TrainAcc = max(nb.fit$results["Accuracy"])
# nb.pred=predict(nb.fit,Testing_data)
# nb.TestAcc = calc_acc(predicted = nb.pred, actual = Testing_data$y)
#
# nb.res = list(nb.fit=nb.fit,nb.TrainAcc=nb.TrainAcc,nb.TestAcc=nb.TestAcc)
# nb.res
# result = list(svm.lin.res = svm.lin.res,svm.rad.res = svm.rad.res,rf.res=rf.res)
CDR_acc = data.frame(
Model = c("LDA", "SVM linear",  "SVM radial","Random Forest"),
TrainAccuracy = c(lda.TrainAcc, svm.lin.TrainAcc, svm.rad.TrainAcc, rf.TrainAcc),
TestAccuracy = c(lda.TestAcc, svm.lin.TestAcc, svm.rad.TestAcc, rf.TestAcc)
)
knitr::kable(CDR_acc)
SVM_RF_ImgCS_result = list(lda.res = lda.res, svm.lin.res = svm.lin.res,svm.rad.res = svm.rad.res,rf.res=rf.res,CDR_acc=CDR_acc)
save(SVM_RF_ImgCS_result, file ="./result/SVM_RF_ImgCS_result.Rdata")
shiny::runApp('C:/Users/xtk96/Desktop/625app')
# load the shiny package
library(shiny)
library(oro.nifti)
library(stringr)
library(dplyr)
library(ggplot2)
library(glmnet)
reshapeData <- function(path) {
img_raw = oro.nifti::readANALYZE(path)@.Data[,,88,1]
img = reshape2::melt(img_raw)
return(img)
}
readData <- function(path) {
img_raw = oro.nifti::readANALYZE(path)@.Data[,,88,1]
return(img_raw)
}
ui <- fluidPage(
titlePanel(p("Predication APP for Demantia")),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Upload image information.", accept = ".zip"),
actionButton("showButton", "Showing your MRI"),
tags$hr(),
radioButtons("m.f", "Your gender:",
choices = c(Male= "M",
"Female" = 'F'),
selected = 'F'),
numericInput('age', 'Your age:', 70, min = 60, max = 100),
radioButtons("educ", "Your education level:",
choices = c('less than high school grad.'= 1,
"high school grad." = 2,
"some college" = 3,
"college grad." = 4,
"beyond college" = 5),
selected = 1),
sliderInput("SES",
"Your socioeconomic status:",
min = 1,  max = 5, value = 3),
actionButton("goButton", "Go")
),
mainPanel(
plotOutput("plot2"),
h3('Results of Demantia Prediction'),
h4('Based on value, your predicted Demantia status is'),
verbatimTextOutput("check")
)
)
)
# x = readANALYZE('C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/RAW/OAS1_0001_MR1_mpr-1_anon.hdr')
# img =  x@.Data[,,88,1]
# tb = reshape2::melt(img)
server <- function(input,output){
load("ridge_fit.Rdata")
best.fit = ridge.fit
AD_check <- function(fit = best.fit,data) {
ridge.pred.tst <- predict(fit, as.vector(data), type="response")
res = as.character(ifelse(ridge.pred.tst==0,'No Demantia','Possible to have Demantia'))
return(res)
}
reshapeDat <- eventReactive(input$showButton,{
uz = unzip(input$file1$datapath)
path = grep('(\\masked_gfc.hdr$)', uz, value = TRUE)[1]
#path = 'C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/PROCESSED/MPRAGE/T88_111/OAS1_0001_MR1_mpr_n4_anon_111_t88_masked_gfc.hdr'
out <- reshapeData(path)
})
output$plot2<-renderPlot({
ggplot(reshapeDat(), aes(x = Var1, y = Var2)) + geom_raster(aes(fill=value)) + theme(axis.title.x = element_blank(), axis.title.y = element_blank())+ theme(legend.position = "none")} , width = 400, height = 400)
Dat <- eventReactive(input$goButton,{
uz = unzip(input$file1$datapath)
path = grep('(\\masked_gfc.hdr$)', uz, value = TRUE)[1]
#path = 'C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/PROCESSED/MPRAGE/T88_111/OAS1_0001_MR1_mpr_n4_anon_111_t88_masked_gfc.hdr'
out <- readData(path)
})
# user_data <- cbind.data.frame(
#   x = Dat(),
#   "m.f" =input$m.f,
#   "age" =input$age,
#   "educ" =input$educ,
#   "SES" =input$SES
# )
output$check <- renderPrint({AD_check(best.fit,Dat())})
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
#C:\Users\xtk96\AppData\Local\Temp\RtmpmSOlUp/ab79b5b8676092e90450e115/0.hdr
setwd("C:/Users/xtk96/Desktop/625app")
setwd("C:/Users/xtk96/Desktop/625app")
# load the shiny package
library(shiny)
library(oro.nifti)
library(stringr)
library(dplyr)
library(ggplot2)
library(glmnet)
reshapeData <- function(path) {
img_raw = oro.nifti::readANALYZE(path)@.Data[,,88,1]
img = reshape2::melt(img_raw)
return(img)
}
readData <- function(path) {
img_raw = oro.nifti::readANALYZE(path)@.Data[,,88,1]
return(img_raw)
}
ui <- fluidPage(
titlePanel(p("Predication APP for Demantia")),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Upload image information.", accept = ".zip"),
actionButton("showButton", "Showing your MRI"),
tags$hr(),
radioButtons("m.f", "Your gender:",
choices = c(Male= "M",
"Female" = 'F'),
selected = 'F'),
numericInput('age', 'Your age:', 70, min = 60, max = 100),
radioButtons("educ", "Your education level:",
choices = c('less than high school grad.'= 1,
"high school grad." = 2,
"some college" = 3,
"college grad." = 4,
"beyond college" = 5),
selected = 1),
sliderInput("SES",
"Your socioeconomic status:",
min = 1,  max = 5, value = 3),
actionButton("goButton", "Go")
),
mainPanel(
plotOutput("plot2"),
h3('Results of Demantia Prediction'),
h4('Based on value, your predicted Demantia status is'),
verbatimTextOutput("check")
)
)
)
# x = readANALYZE('C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/RAW/OAS1_0001_MR1_mpr-1_anon.hdr')
# img =  x@.Data[,,88,1]
# tb = reshape2::melt(img)
server <- function(input,output){
load("ridge_fit.Rdata")
best.fit = ridge.fit
AD_check <- function(fit = best.fit,data) {
ridge.pred.tst <- predict(fit, as.vector(data), type="response")
res = as.character(ifelse(ridge.pred.tst==0,'No Demantia','Possible to have Demantia'))
return(res)
}
reshapeDat <- eventReactive(input$showButton,{
uz = unzip(input$file1$datapath)
path = grep('(\\masked_gfc.hdr$)', uz, value = TRUE)[1]
#path = 'C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/PROCESSED/MPRAGE/T88_111/OAS1_0001_MR1_mpr_n4_anon_111_t88_masked_gfc.hdr'
out <- reshapeData(path)
})
output$plot2<-renderPlot({
ggplot(reshapeDat(), aes(x = Var1, y = Var2)) + geom_raster(aes(fill=value)) + theme(axis.title.x = element_blank(), axis.title.y = element_blank())+ theme(legend.position = "none")} , width = 400, height = 400)
Dat <- eventReactive(input$goButton,{
uz = unzip(input$file1$datapath)
path = grep('(\\masked_gfc.hdr$)', uz, value = TRUE)[1]
#path = 'C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/PROCESSED/MPRAGE/T88_111/OAS1_0001_MR1_mpr_n4_anon_111_t88_masked_gfc.hdr'
out <- readData(path)
})
# user_data <- cbind.data.frame(
#   x = Dat(),
#   "m.f" =input$m.f,
#   "age" =input$age,
#   "educ" =input$educ,
#   "SES" =input$SES
# )
output$check <- renderPrint({AD_check(best.fit,Dat())})
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
#C:\Users\xtk96\AppData\Local\Temp\RtmpmSOlUp/ab79b5b8676092e90450e115/0.hdr
img_raw = oro.nifti::readANALYZE('../myMRI/OAS1_0001_MR1_mpr_n4_anon_111_t88_masked_gfc.hdr')@.Data[,,88,1]
img_raw
img_raw[apply(img_raw != 0, 1, any), apply(img_raw != 0, 2, any) ,]
apply(img_raw != 0, 1, any)
apply(img_raw != 0, 2, any)
S.new = img_raw
S.new =  S.new[apply(S.new != 0, 1, any), apply(S.new != 0, 2, any) ,]
S.new <- array (NA, dim = c(176,208,length(img_list)))
img_raw[apply(img_raw != 0, 1, any), apply(img_raw != 0, 2, any)]
#img_raw =  img_raw[apply(img_raw != 0, 1, any), apply(img_raw != 0, 2, any)]
img_raw2 =  img_raw[apply(img_raw != 0, 1, any), apply(img_raw != 0, 2, any)]
137*169
library(caret)
library(glmnet)
load("C:/Users/xtk96/Desktop/625OASIS/data/img_list.rds")
S.new <- array (NA, dim = c(176,208,length(img_list)))
for (i in 1:length(img_list)){
a = img_list[[i]]
test = a[,,88]
S.new[,,i] = test
}
S.new =  S.new[apply(S.new != 0, 1, any), apply(S.new != 0, 2, any) ,]
data = read.csv("C:/Users/xtk96/Desktop/625OASIS/data/oasis_cross-sectional_filter.csv")
labels = data$CDR
#--------------------------------------------------------------------
#   Separate Train and Test Data 8:2
#--------------------------------------------------------------------
n = dim(S.new)[3]   #from n = 198
num_lst = 1:n
set.seed(123)
random_sample <- createDataPartition(num_lst, p = 0.8, list = FALSE)
train.X = S.new[,,random_sample]
test.X = S.new[,,-random_sample]
train.demo = data[random_sample,]
test.demo = data[-random_sample,]
train.Y = train.demo$CDR
test.Y = test.demo$CDR
prep_binary_classification = function(images, labels, posLabel = 1, negLabel = 0) {
dims = dim(images)
X.pos = t(matrix(images[,,labels %in% posLabel],nrow=dims[1]*dims[2])) ## n1 * (137*169)
X.neg = t(matrix(images[,,labels %in% negLabel],nrow=dims[1]*dims[2])) ## n1 * (137*169)
return(list(X=rbind(X.pos, X.neg),y = c(rep(1,nrow(X.pos)),rep(0,nrow(X.neg)))))
}
trn = prep_binary_classification(train.X, train.Y, 1, 0)
tst = prep_binary_classification(test.X, test.Y, 1, 0)
combined = prep_binary_classification (S.new, data$CDR, 1, 0)
cv.fit = cv.glmnet(combined$X, combined$y, family = "binomial",
alpha = 0,
standardize = FALSE, keep = TRUE)
best_param = cv.fit$lambda.min   #best parameter
best_coef = coef(cv.fit, s = "lambda.min")
#--------------------------------------------------------------------
#   Ridge Regression
#--------------------------------------------------------------------
ridge.fit <- glmnet(trn$X, trn$y, family="binomial", alpha = 0, lambda = best_param)
save(ridge.fit, file = 'ridge_fit.Rdata')
# # ridge.pred.trn <- predict(ridge.fit, trn$X, type="response")
# ridge.pred.tst <- predict(ridge.fit, tst$X, type="response")
# load the shiny package
library(shiny)
library(oro.nifti)
library(stringr)
library(dplyr)
library(ggplot2)
library(glmnet)
reshapeData <- function(path) {
img_raw = oro.nifti::readANALYZE(path)@.Data[,,88,1]
img = reshape2::melt(img_raw)
return(img)
}
readData <- function(path) {
img_raw = oro.nifti::readANALYZE(path)@.Data[,,88,1]
img_raw2 = img_raw[apply(img_raw != 0, 1, any), apply(img_raw != 0, 2, any)]
return(img_raw2)
}
ui <- fluidPage(
titlePanel(p("Predication APP for Demantia")),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Upload image information.", accept = ".zip"),
actionButton("showButton", "Showing your MRI"),
tags$hr(),
radioButtons("m.f", "Your gender:",
choices = c(Male= "M",
"Female" = 'F'),
selected = 'F'),
numericInput('age', 'Your age:', 70, min = 60, max = 100),
radioButtons("educ", "Your education level:",
choices = c('less than high school grad.'= 1,
"high school grad." = 2,
"some college" = 3,
"college grad." = 4,
"beyond college" = 5),
selected = 1),
sliderInput("SES",
"Your socioeconomic status:",
min = 1,  max = 5, value = 3),
actionButton("goButton", "Go")
),
mainPanel(
plotOutput("plot2"),
h3('Results of Demantia Prediction'),
h4('Based on value, your predicted Demantia status is'),
verbatimTextOutput("check")
)
)
)
# x = readANALYZE('C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/RAW/OAS1_0001_MR1_mpr-1_anon.hdr')
# img =  x@.Data[,,88,1]
# tb = reshape2::melt(img)
server <- function(input,output){
load("ridge_fit.Rdata")
best.fit = ridge.fit
AD_check <- function(fit = best.fit,data) {
ridge.pred.tst <- predict(fit, as.vector(data), type="response")
res = as.character(ifelse(ridge.pred.tst==0,'No Demantia','Possible to have Demantia'))
return(res)
}
reshapeDat <- eventReactive(input$showButton,{
uz = unzip(input$file1$datapath)
path = grep('(\\masked_gfc.hdr$)', uz, value = TRUE)[1]
#path = 'C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/PROCESSED/MPRAGE/T88_111/OAS1_0001_MR1_mpr_n4_anon_111_t88_masked_gfc.hdr'
out <- reshapeData(path)
})
output$plot2<-renderPlot({
ggplot(reshapeDat(), aes(x = Var1, y = Var2)) + geom_raster(aes(fill=value)) + theme(axis.title.x = element_blank(), axis.title.y = element_blank())+ theme(legend.position = "none")} , width = 400, height = 400)
Dat <- eventReactive(input$goButton,{
uz = unzip(input$file1$datapath)
path = grep('(\\masked_gfc.hdr$)', uz, value = TRUE)[1]
#path = 'C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/PROCESSED/MPRAGE/T88_111/OAS1_0001_MR1_mpr_n4_anon_111_t88_masked_gfc.hdr'
out <- readData(path)
})
# user_data <- cbind.data.frame(
#   x = Dat(),
#   "m.f" =input$m.f,
#   "age" =input$age,
#   "educ" =input$educ,
#   "SES" =input$SES
# )
output$check <- renderPrint({AD_check(best.fit,Dat())})
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
#C:\Users\xtk96\AppData\Local\Temp\RtmpmSOlUp/ab79b5b8676092e90450e115/0.hdr
# load the shiny package
library(shiny)
library(oro.nifti)
library(stringr)
library(dplyr)
library(ggplot2)
library(glmnet)
reshapeData <- function(path) {
img_raw = oro.nifti::readANALYZE(path)@.Data[,,88,1]
img = reshape2::melt(img_raw)
return(img)
}
readData <- function(path) {
img_raw = oro.nifti::readANALYZE(path)@.Data[,,88,1]
img_raw2 = img_raw[apply(img_raw != 0, 1, any), apply(img_raw != 0, 2, any)]
return(img_raw2)
}
ui <- fluidPage(
titlePanel(p("Predication APP for Demantia")),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Upload image information.", accept = ".zip"),
actionButton("showButton", "Showing your MRI"),
tags$hr(),
radioButtons("m.f", "Your gender:",
choices = c(Male= "M",
"Female" = 'F'),
selected = 'F'),
numericInput('age', 'Your age:', 70, min = 60, max = 100),
radioButtons("educ", "Your education level:",
choices = c('less than high school grad.'= 1,
"high school grad." = 2,
"some college" = 3,
"college grad." = 4,
"beyond college" = 5),
selected = 1),
sliderInput("SES",
"Your socioeconomic status:",
min = 1,  max = 5, value = 3),
actionButton("goButton", "Go")
),
mainPanel(
plotOutput("plot2"),
h3('Results of Demantia Prediction'),
h4('Based on value, your predicted Demantia status is'),
verbatimTextOutput("check")
)
)
)
# x = readANALYZE('C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/RAW/OAS1_0001_MR1_mpr-1_anon.hdr')
# img =  x@.Data[,,88,1]
# tb = reshape2::melt(img)
server <- function(input,output){
load("ridge_fit.Rdata")
best.fit = ridge.fit
AD_check <- function(fit = best.fit,data) {
ridge.pred.tst <- predict(fit, as.vector(data), type="response")
res = as.character(ifelse(ridge.pred.tst==0,'No Demantia','Possible to have Demantia'))
return(res)
}
reshapeDat <- eventReactive(input$showButton,{
uz = unzip(input$file1$datapath)
path = grep('(\\masked_gfc.hdr$)', uz, value = TRUE)[1]
#path = 'C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/PROCESSED/MPRAGE/T88_111/OAS1_0001_MR1_mpr_n4_anon_111_t88_masked_gfc.hdr'
out <- reshapeData(path)
})
output$plot2<-renderPlot({
ggplot(reshapeDat(), aes(x = Var1, y = Var2)) + geom_raster(aes(fill=value)) + theme(axis.title.x = element_blank(), axis.title.y = element_blank())+ theme(legend.position = "none")} , width = 400, height = 400)
Dat <- eventReactive(input$goButton,{
uz = unzip(input$file1$datapath)
path = grep('(\\masked_gfc.hdr$)', uz, value = TRUE)[1]
#path = 'C:/Users/xtk96/Desktop/625_final/OAS1_0001_MR1/PROCESSED/MPRAGE/T88_111/OAS1_0001_MR1_mpr_n4_anon_111_t88_masked_gfc.hdr'
out <- readData(path)
})
# user_data <- cbind.data.frame(
#   x = Dat(),
#   "m.f" =input$m.f,
#   "age" =input$age,
#   "educ" =input$educ,
#   "SES" =input$SES
# )
output$check <- renderPrint({AD_check(best.fit,Dat())})
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
#C:\Users\xtk96\AppData\Local\Temp\RtmpmSOlUp/ab79b5b8676092e90450e115/0.hdr
